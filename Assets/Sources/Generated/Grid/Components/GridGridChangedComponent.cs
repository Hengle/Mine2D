//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentEntityApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public partial class GridEntity {

    static readonly svanderweele.Mine.Core.Pieces.Grid.Core.Components.GridChangedComponent gridChangedComponent = new svanderweele.Mine.Core.Pieces.Grid.Core.Components.GridChangedComponent();

    public bool isGridChanged {
        get { return HasComponent(GridComponentsLookup.GridChanged); }
        set {
            if (value != isGridChanged) {
                var index = GridComponentsLookup.GridChanged;
                if (value) {
                    var componentPool = GetComponentPool(index);
                    var component = componentPool.Count > 0
                            ? componentPool.Pop()
                            : gridChangedComponent;

                    AddComponent(index, component);
                } else {
                    RemoveComponent(index);
                }
            }
        }
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentMatcherApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public sealed partial class GridMatcher {

    static Entitas.IMatcher<GridEntity> _matcherGridChanged;

    public static Entitas.IMatcher<GridEntity> GridChanged {
        get {
            if (_matcherGridChanged == null) {
                var matcher = (Entitas.Matcher<GridEntity>)Entitas.Matcher<GridEntity>.AllOf(GridComponentsLookup.GridChanged);
                matcher.componentNames = GridComponentsLookup.componentNames;
                _matcherGridChanged = matcher;
            }

            return _matcherGridChanged;
        }
    }
}
